-- üîî TRIGGER PARA CRIAR CONFIGURA√á√ïES DE NOTIFICA√á√ÉO AUTOMATICAMENTE
-- Este trigger garante que todo usu√°rio novo tenha configura√ß√µes de notifica√ß√£o

-- ================================
-- 1. FUN√á√ÉO PARA CRIAR CONFIGURA√á√ïES
-- ================================
CREATE OR REPLACE FUNCTION criar_configuracoes_notificacao_novo_usuario()
RETURNS TRIGGER AS $$
BEGIN
    -- Inserir configura√ß√µes padr√£o para o novo usu√°rio
    INSERT INTO notification_settings (
        user_id,
        email_notifications,
        push_notifications,
        training_reminders,
        system_notifications,
        reminder_frequency,
        quiet_hours_start,
        quiet_hours_end,
        created_at,
        updated_at
    ) VALUES (
        NEW.id,          -- ID do usu√°rio rec√©m-criado
        TRUE,            -- email_notifications
        TRUE,            -- push_notifications
        TRUE,            -- training_reminders
        TRUE,            -- system_notifications
        'daily',         -- reminder_frequency
        '22:00',         -- quiet_hours_start
        '08:00',         -- quiet_hours_end
        NOW(),           -- created_at
        NOW()            -- updated_at
    );
    
    -- Log da cria√ß√£o das configura√ß√µes
    RAISE NOTICE '‚úÖ Configura√ß√µes de notifica√ß√£o criadas para usu√°rio: % (%)', NEW.nome, NEW.id;
    
    RETURN NEW;
EXCEPTION
    WHEN OTHERS THEN
        -- Se houver erro, apenas fazer log mas n√£o bloquear a cria√ß√£o do usu√°rio
        RAISE WARNING '‚ö†Ô∏è Erro ao criar configura√ß√µes de notifica√ß√£o para usu√°rio %: %', NEW.id, SQLERRM;
        RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- ================================
-- 2. CRIAR TRIGGER
-- ================================
DROP TRIGGER IF EXISTS trigger_criar_configuracoes_notificacao ON usuarios;

CREATE TRIGGER trigger_criar_configuracoes_notificacao
    AFTER INSERT ON usuarios
    FOR EACH ROW
    EXECUTE FUNCTION criar_configuracoes_notificacao_novo_usuario();

-- ================================
-- 3. VERIFICAR SE O TRIGGER FOI CRIADO
-- ================================
SELECT 
    trigger_name,
    event_manipulation,
    event_object_table,
    action_timing,
    action_statement
FROM information_schema.triggers 
WHERE trigger_name = 'trigger_criar_configuracoes_notificacao';

-- ================================
-- 4. TESTAR O TRIGGER (OPCIONAL)
-- ================================
/*
-- Descomente para testar:

-- Criar um usu√°rio de teste
INSERT INTO usuarios (
    email, 
    nome, 
    senha, 
    tipo_usuario, 
    ativo, 
    primeiro_login
) VALUES (
    'teste_trigger@exemplo.com',
    'Usu√°rio Teste Trigger',
    'senha123',
    'usuario',
    TRUE,
    TRUE
) RETURNING id, nome;

-- Verificar se as configura√ß√µes foram criadas
SELECT 
    u.nome,
    u.email,
    ns.email_notifications,
    ns.push_notifications,
    ns.training_reminders,
    ns.created_at
FROM usuarios u
JOIN notification_settings ns ON u.id = ns.user_id
WHERE u.email = 'teste_trigger@exemplo.com';

-- Limpar teste
DELETE FROM usuarios WHERE email = 'teste_trigger@exemplo.com';
*/

-- ================================
-- RESULTADO ESPERADO:
-- ================================
/*
Ap√≥s executar este script:
1. ‚úÖ Fun√ß√£o de trigger criada
2. ‚úÖ Trigger ativo na tabela usuarios
3. ‚úÖ Todo usu√°rio novo automaticamente ter√° configura√ß√µes
4. ‚úÖ Se houver erro, n√£o bloqueia a cria√ß√£o do usu√°rio
5. ‚úÖ Logs informativos s√£o gerados
*/

-- ================================
-- VANTAGENS DO TRIGGER:
-- ================================
/*
1. üîÑ AUTOM√ÅTICO - Funciona independente do frontend
2. üõ°Ô∏è GARANTIDO - Sempre executado na cria√ß√£o
3. üöÄ R√ÅPIDO - Execu√ß√£o no banco de dados
4. üîß BACKUP - Funciona mesmo se o frontend falhar
5. üìù LOGS - Registra tentativas e erros
*/
